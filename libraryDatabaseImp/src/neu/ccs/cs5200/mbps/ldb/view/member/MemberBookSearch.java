/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package neu.ccs.cs5200.mbps.ldb.view.member;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import neu.ccs.cs5200.mbps.ldb.jdbc.LDBConnector;
import neu.ccs.cs5200.mbps.ldb.model.Book;
import neu.ccs.cs5200.mbps.ldb.model.Member;
import neu.ccs.cs5200.mbps.ldb.jdbc.QueryResult;
import neu.ccs.cs5200.mbps.ldb.nav.Navigator;
import neu.ccs.cs5200.mbps.ldb.view.util.Registry;
import neu.ccs.cs5200.mbps.ldb.view.util.ViewConstants;

/**
 * Search for a book and display the results.
 * 
 * @author Matt
 */
public class MemberBookSearch extends javax.swing.JPanel {

    /**
     * Creates new form MemberBookSearch
     */
    public MemberBookSearch() {
        initComponents();
        registerBookSearch();
        
        firstCard();
    }
    
    private void registerBookSearch() {
        // register with the navigator so that this screen can be forced to
        // display the search screen, rather than the results page, later on
        (Navigator.getInstance()).register(ViewConstants.Member.BOOK_SEARCH, this);
    }
    
    /**
     * Initialize the Book Search screen.
     */
    public final void firstCard() {
        this.bookFieldPicker.setSelectedIndex(0);
        this.bookSearchTextBox.setText("");
        
        // start with the book search screen
        CardLayout cl = (CardLayout) getLayout();
        cl.show(this, ViewConstants.Member.BookSearch.SEARCH);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bookSearchPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bookFieldPicker = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        bookSearchTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bookSearchResultsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookSearchResultsTable = new javax.swing.JTable();
        addToWishListButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Search for");

        bookFieldPicker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID", "ISBN", "Title", "Author", "Publisher", "Genre" }));

        jLabel1.setText("Search by");

        jLabel3.setText("Search for a Book");

        javax.swing.GroupLayout bookSearchPanelLayout = new javax.swing.GroupLayout(bookSearchPanel);
        bookSearchPanel.setLayout(bookSearchPanelLayout);
        bookSearchPanelLayout.setHorizontalGroup(
            bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookSearchPanelLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(bookSearchPanelLayout.createSequentialGroup()
                        .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookSearchTextBox)
                            .addComponent(bookFieldPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(153, Short.MAX_VALUE))
        );
        bookSearchPanelLayout.setVerticalGroup(
            bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookSearchPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bookFieldPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookSearchTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        add(bookSearchPanel, "bookSearch");

        bookSearchResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "ID", "ISBN", "Title", "Author", "Publisher", "Genre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookSearchResultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(bookSearchResultsTable);

        addToWishListButton.setText("Add Selected to Wish List");
        addToWishListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToWishListButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookSearchResultsPanelLayout = new javax.swing.GroupLayout(bookSearchResultsPanel);
        bookSearchResultsPanel.setLayout(bookSearchResultsPanelLayout);
        bookSearchResultsPanelLayout.setHorizontalGroup(
            bookSearchResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(bookSearchResultsPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(addToWishListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        bookSearchResultsPanelLayout.setVerticalGroup(
            bookSearchResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookSearchResultsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookSearchResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addToWishListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        add(bookSearchResultsPanel, "bookSearchResults");
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        if (!bookSearchTextBox.getText().isEmpty()) {
            // load the book results table into memory to manage it
            DefaultTableModel m = (DefaultTableModel) bookSearchResultsTable.getModel();

            // wipe out the results table
            while (m.getRowCount() > 0) {
                m.removeRow(0);
            }

            // search the database for books matching the select fields
            List<Book> books = (LDBConnector.getInstance()).searchBook((String) bookFieldPicker.getSelectedItem(), bookSearchTextBox.getText());

            // add the books to the results table
            for (Book b : books)
            {
                m.addRow(new Object[] { false,
                                        b.getId(),
                                        b.getIsbn(),
                                        b.getTitle(),
                                        b.getAuthor(),
                                        b.getPublisher(),
                                        b.getGenre()
                });
            }

            // switch the view to the book search results
            CardLayout cl = (CardLayout) getLayout();
            cl.show(this, ViewConstants.Member.BookSearch.RESULTS);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addToWishListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToWishListButtonActionPerformed
        // add selected books to the member's wishlist
        
        List<Book> selectedBooks = new ArrayList<Book>();
        
        // add the selected rows to the wish list
        DefaultTableModel m = (DefaultTableModel) bookSearchResultsTable.getModel();
        for (int i=0; i<m.getRowCount(); i++) 
        {
            
            // check for a selected row
            if ((Boolean) m.getValueAt(i, 0)) 
            {
                Book bookToAdd = new Book();
                
                // skip col 0
                int id = (Integer) m.getValueAt(i, 1);
                String isbn = (String) m.getValueAt(i, 2);
                String title = (String) m.getValueAt(i, 3);
                String author = (String) m.getValueAt(i, 4);
                String publisher = (String) m.getValueAt(i, 5);
                String genre = (String) m.getValueAt(i, 6);
                
                bookToAdd.setId(id);
                bookToAdd.setIsbn(isbn);
                bookToAdd.setTitle(title);
                bookToAdd.setAuthor(author);
                bookToAdd.setPublisher(publisher);
                bookToAdd.setGenre(genre);
                
                selectedBooks.add(bookToAdd);
                
                // clear the check
                m.setValueAt(false, i, 0);
            }
        }
        
        // add the books to the user's wishlist
        if (!selectedBooks.isEmpty()) 
        {
            Member member = (Member) (Registry.getInstance()).get(ViewConstants.SESSION_MEMBER);
            for (Book b : selectedBooks) 
            {
                QueryResult result = (LDBConnector.getInstance()).addBookToWishList(member.getMemberID(), b.getId());
                if (!result.isQuerySuccessful())
                {
                    JOptionPane.showMessageDialog(this,
                                                  result.getMessage(),
                                                  "Book Not Added",
                                                  JOptionPane.WARNING_MESSAGE
                    );
                }
                else
                {
                    JOptionPane.showMessageDialog(this, 
                                                  "Book added to Wish List",
                                                  "Book Added",
                                                  JOptionPane.INFORMATION_MESSAGE
                    );
                }
            }
        }
        
        (Navigator.getInstance()).register(ViewConstants.Member.BOOK_SEARCH, this);
    }//GEN-LAST:event_addToWishListButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        CardLayout cl = (CardLayout) getLayout();
        cl.show(this, ViewConstants.Member.BookSearch.SEARCH);
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToWishListButton;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox bookFieldPicker;
    private javax.swing.JPanel bookSearchPanel;
    private javax.swing.JPanel bookSearchResultsPanel;
    private javax.swing.JTable bookSearchResultsTable;
    private javax.swing.JTextField bookSearchTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
