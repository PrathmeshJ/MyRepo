/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package neu.ccs.cs5200.mbps.ldb.view.member;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import neu.ccs.cs5200.mbps.ldb.jdbc.LDBConnector;
import neu.ccs.cs5200.mbps.ldb.model.Book;
import neu.ccs.cs5200.mbps.ldb.model.Member;
import neu.ccs.cs5200.mbps.ldb.model.WishList;
import neu.ccs.cs5200.mbps.ldb.nav.Navigator;
import neu.ccs.cs5200.mbps.ldb.view.util.Registry;
import neu.ccs.cs5200.mbps.ldb.view.util.ViewConstants;

/**
 * View the books that the Member may want to check out at a later date.
 * 
 * @author Matt
 */
public class ViewWishList extends javax.swing.JPanel {

    WishList wishList;
    
    /**
     * Creates new form ViewWishList
     */
    public ViewWishList() {
        initComponents();
        registerWishListPanel();
    }
    
    
    /**
     * Register with the navigator so that the wishlist can be forced to reload
     * its values from the database.
     */
    private void registerWishListPanel() {
        (Navigator.getInstance()).register(ViewConstants.Member.VIEW_WISH_LIST, this);
    }
    

    /**
     * Query the database for wishlist attributes every time the screen is loaded.
     */
    public void loadWishList() {
        // get the member session
        Member member = (Member) (Registry.getInstance()).get(ViewConstants.SESSION_MEMBER);
        
        // dispose of the old wishlist table
        DefaultTableModel m = (DefaultTableModel) this.wishListTable.getModel();
        while (m.getRowCount() > 0) {
            m.removeRow(0);
        }
        
        // get the updated wishlist attributes
        wishList = (LDBConnector.getInstance()).viewWishList(member);
        
        // set the wishlist's name
        this.wishListNameTextField.setText(wishList.getName());

        // set the wishlist's books
        if (!wishList.getBooks().isEmpty()) {
            // add the books to the wish list table
            for (Book b : wishList.getBooks())
            {
                m.addRow(new Object[] { false,
                                        b.getId(),
                                        b.getIsbn(),
                                        b.getTitle(),
                                        b.getAuthor(),
                                        b.getPublisher(),
                                        b.getGenre()
                });
            }
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wishListNameTextField = new javax.swing.JTextField();
        saveWishListNameButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        wishListTable = new javax.swing.JTable();
        removeSelectedButton = new javax.swing.JButton();

        wishListNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wishListNameTextFieldKeyTyped(evt);
            }
        });

        saveWishListNameButton.setText("Save");
        saveWishListNameButton.setEnabled(false);
        saveWishListNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveWishListNameButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("View Wish List");

        wishListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "ID", "ISBN", "Title", "Author", "Publisher", "Genre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        wishListTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(wishListTable);

        removeSelectedButton.setText("Remove Selected");
        removeSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(removeSelectedButton)
                .addContainerGap(136, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(164, 164, 164))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(wishListNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveWishListNameButton)
                        .addGap(63, 63, 63))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveWishListNameButton)
                    .addComponent(wishListNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeSelectedButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveWishListNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveWishListNameButtonActionPerformed
        // if the text field is empty, revert to the old name
        if (this.wishListNameTextField.getText().isEmpty()) {
            this.wishListNameTextField.setText(wishList.getName());
        } else {
            this.saveWishListNameButton.setEnabled(false);
            Member member = (Member) (Registry.getInstance()).get(ViewConstants.SESSION_MEMBER);
            (LDBConnector.getInstance()).setWishListName(member.getMemberID(), this.wishListNameTextField.getText());
        }
    }//GEN-LAST:event_saveWishListNameButtonActionPerformed

    private void removeSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedButtonActionPerformed
        // remove the selected books from the member's wish list
        DefaultTableModel m = (DefaultTableModel) wishListTable.getModel();
        
        List<Book> booksToRemove = new ArrayList<Book>();
        
        for (int i=0; i<m.getRowCount(); i++) {
            if ((Boolean) m.getValueAt(i, 0)) {
                int id = (Integer) m.getValueAt(i, 1);
                String isbn = (String) m.getValueAt(i, 2);
                String title = (String) m.getValueAt(i, 3);
                String author = (String) m.getValueAt(i, 4);
                String publisher = (String) m.getValueAt(i, 5);
                String genre = (String) m.getValueAt(i, 6);
                
                Book b = new Book();
                b.setId(id);
                b.setIsbn(isbn);
                b.setTitle(title);
                b.setAuthor(author);
                b.setPublisher(publisher);
                b.setGenre(genre);
                
                booksToRemove.add(b);
                
                // remove the row from the table
                m.removeRow(i);
                i--; // don't skip a row
            }
        }
        
        // remove each of the selected books from the wish list
        Member member = (Member) (Registry.getInstance()).get(ViewConstants.SESSION_MEMBER);
       
        for (Book b : booksToRemove)
        {
            (LDBConnector.getInstance()).removeSelectedFromWishList(member.getMemberID(), b.getIsbn());
        }
    }//GEN-LAST:event_removeSelectedButtonActionPerformed

    private void wishListNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wishListNameTextFieldKeyTyped
        this.saveWishListNameButton.setEnabled(true);
    }//GEN-LAST:event_wishListNameTextFieldKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeSelectedButton;
    private javax.swing.JButton saveWishListNameButton;
    private javax.swing.JTextField wishListNameTextField;
    private javax.swing.JTable wishListTable;
    // End of variables declaration//GEN-END:variables
}
