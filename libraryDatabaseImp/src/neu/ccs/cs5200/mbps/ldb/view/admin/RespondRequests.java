/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package neu.ccs.cs5200.mbps.ldb.view.admin;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import neu.ccs.cs5200.mbps.ldb.jdbc.LDBConnector;
import neu.ccs.cs5200.mbps.ldb.model.Request;
import neu.ccs.cs5200.mbps.ldb.nav.Navigator;
import neu.ccs.cs5200.mbps.ldb.view.util.ViewConstants;

/**
 * Administrators respond to Users' create requests and Members' delete
 * requests in the page.
 * 
 * @author Matt
 */
public class RespondRequests extends javax.swing.JPanel {

    /**
     * Creates new form RespondRequests
     */
    public RespondRequests() {
        initComponents();
        registerRespondRequestsPanel();
    }
    
    /**
     * Register the respond to requests screen for lazy loading
     */
    private void registerRespondRequestsPanel() {
        (Navigator.getInstance()).register(ViewConstants.Admin.RESPOND_TO_REQUESTS, this);
    }
    
    /**
     * Update the current requests
     */
    public void loadRequests() {
        DefaultTableModel m = (DefaultTableModel) requestsTable.getModel();
        
        // wipe out the existing table
        while (m.getRowCount() > 0) {
            m.removeRow(0);
        }
        
        // populate the table with all requests
        List<Request> requests = (LDBConnector.getInstance()).viewRequests();
        
        // add the books to the results table
        for (Request r : requests)
        {
            m.addRow(new Object[] { false,
                                    r.getId(),
                                    r.getRequestor(),
                                    r.getAddress(),
                                    r.getPhoneNumber(),
                                    r.getType()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        requestsTable = new javax.swing.JTable();
        acceptRequestsButton = new javax.swing.JButton();
        rejectRequestsButton = new javax.swing.JButton();

        jScrollPane2.setName(""); // NOI18N

        requestsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "Request ID", "Email", "Address", "Phone Number", "Request Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        requestsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(requestsTable);

        acceptRequestsButton.setText("Accept Selected");
        acceptRequestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptRequestsButtonActionPerformed(evt);
            }
        });

        rejectRequestsButton.setText("Reject Selected");
        rejectRequestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectRequestsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(acceptRequestsButton)
                .addGap(36, 36, 36)
                .addComponent(rejectRequestsButton)
                .addContainerGap(79, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptRequestsButton)
                    .addComponent(rejectRequestsButton))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 44, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void acceptRequestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptRequestsButtonActionPerformed
        // accept all selected rows
        DefaultTableModel m = (DefaultTableModel) requestsTable.getModel();
        for (int i=0; i<m.getRowCount(); i++) {
            // get a selected row
            if ((Boolean) m.getValueAt(i, 0)) {
                // accept the request by that row's request ID field
                int id = (Integer) m.getValueAt(i, 1);
                (LDBConnector.getInstance()).acceptSelectedMembershipRequests(id);
                
                // remove the selected row from the table
                m.removeRow(i);
                i--; // adjust the row index to cover all rows
            }
        }
    }//GEN-LAST:event_acceptRequestsButtonActionPerformed

    private void rejectRequestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectRequestsButtonActionPerformed
        // reject all of the selected rows
        DefaultTableModel m = (DefaultTableModel) requestsTable.getModel();
        for (int i=0; i<m.getRowCount(); i++) {
            // get a selected row
            if ((Boolean) m.getValueAt(i, 0)) {
                // remove request by that row's request ID field
                int id = (Integer) m.getValueAt(i, 1);
                (LDBConnector.getInstance()).deleteRequest(id);
                
                // remove the selected row from the table
                m.removeRow(i);
                i--; // adjust the row index to cover all rows
            }
        }
    }//GEN-LAST:event_rejectRequestsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptRequestsButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton rejectRequestsButton;
    private javax.swing.JTable requestsTable;
    // End of variables declaration//GEN-END:variables
}
