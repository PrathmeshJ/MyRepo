/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package neu.ccs.cs5200.mbps.ldb.view.librarian;

import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import neu.ccs.cs5200.mbps.ldb.jdbc.LDBConnector;
import neu.ccs.cs5200.mbps.ldb.model.Book;
import neu.ccs.cs5200.mbps.ldb.jdbc.QueryResult;
import neu.ccs.cs5200.mbps.ldb.model.Rental;
import neu.ccs.cs5200.mbps.ldb.nav.Navigator;
import neu.ccs.cs5200.mbps.ldb.view.util.ViewConstants;

/**
 * Librarians are able to assign books to a Member, to be returned at a later 
 * date.
 * 
 * @author Matt
 */
public class CheckOutBooks extends javax.swing.JPanel {

    // needs to be global to add book and member info in different screens
    private List<Rental> memberRentals;
    
    /**
     * Creates new form CheckOutBook
     */
    public CheckOutBooks() {
        initComponents();
        registerCheckOutBooksPanel();
    }
    
    /**
     * Register the check out books panel for lazy loading
     */
    private void registerCheckOutBooksPanel() {
        (Navigator.getInstance()).register(ViewConstants.Librarian.CHECK_OUT_BOOKS, this);
    }
    
    /**
     * Every time the page is loaded reset the books selected for rental
     */
    public void loadCheckOutBooks() {
        memberRentals = new ArrayList<Rental>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkOutBookSearch = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bookFieldPicker = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        bookSearchTextBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        checkOutBookSearchResults = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookSearchResultsTable = new javax.swing.JTable();
        addToRentalButton = new javax.swing.JButton();
        resultsBackButton = new javax.swing.JButton();
        checkOutAssignMember = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        dueDateYearSpinner = new javax.swing.JSpinner();
        feeAmountSpinner = new javax.swing.JSpinner();
        submitRentalButton = new javax.swing.JButton();
        memberInfoBackButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dueDateMonthSpinner = new javax.swing.JSpinner();
        dueDateDaySpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Search for");

        bookFieldPicker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID", "ISBN", "Title", "Author", "Publisher", "Genre" }));

        jLabel3.setText("Search by");

        jLabel4.setText("Search for a Book to Check Out");

        javax.swing.GroupLayout checkOutBookSearchLayout = new javax.swing.GroupLayout(checkOutBookSearch);
        checkOutBookSearch.setLayout(checkOutBookSearchLayout);
        checkOutBookSearchLayout.setHorizontalGroup(
            checkOutBookSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkOutBookSearchLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addGroup(checkOutBookSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(checkOutBookSearchLayout.createSequentialGroup()
                        .addGroup(checkOutBookSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(checkOutBookSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookSearchTextBox)
                            .addComponent(bookFieldPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        checkOutBookSearchLayout.setVerticalGroup(
            checkOutBookSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkOutBookSearchLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(checkOutBookSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(bookFieldPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(checkOutBookSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookSearchTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        add(checkOutBookSearch, "checkOutBookSearch");

        bookSearchResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "ID", "ISBN", "Title", "Author", "Publisher", "Genre", "Copies"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookSearchResultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(bookSearchResultsTable);

        addToRentalButton.setText("Add Selected to Rental");
        addToRentalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToRentalButtonActionPerformed(evt);
            }
        });

        resultsBackButton.setText("Back");
        resultsBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout checkOutBookSearchResultsLayout = new javax.swing.GroupLayout(checkOutBookSearchResults);
        checkOutBookSearchResults.setLayout(checkOutBookSearchResultsLayout);
        checkOutBookSearchResultsLayout.setHorizontalGroup(
            checkOutBookSearchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
            .addGroup(checkOutBookSearchResultsLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(addToRentalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        checkOutBookSearchResultsLayout.setVerticalGroup(
            checkOutBookSearchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkOutBookSearchResultsLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkOutBookSearchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addToRentalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultsBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        add(checkOutBookSearchResults, "checkOutBookSearchResults");

        checkOutAssignMember.setPreferredSize(new java.awt.Dimension(420, 322));

        jLabel1.setText("Enter Member Information");

        dueDateYearSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2014), Integer.valueOf(2013), null, Integer.valueOf(1)));
        dueDateYearSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(dueDateYearSpinner, "0000"));

        feeAmountSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(0.0d), null, Double.valueOf(0.25d)));
        feeAmountSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(feeAmountSpinner, "$0.00"));

        submitRentalButton.setText("Submit");
        submitRentalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitRentalButtonActionPerformed(evt);
            }
        });

        memberInfoBackButton.setText("Back");
        memberInfoBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberInfoBackButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("EMail");

        jLabel6.setText("Due Date");

        dueDateMonthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));

        dueDateDaySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));

        jLabel8.setText("Late Fee");

        jLabel9.setText("Year");

        jLabel10.setText("Month");

        jLabel11.setText("Day");

        javax.swing.GroupLayout checkOutAssignMemberLayout = new javax.swing.GroupLayout(checkOutAssignMember);
        checkOutAssignMember.setLayout(checkOutAssignMemberLayout);
        checkOutAssignMemberLayout.setHorizontalGroup(
            checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(submitRentalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memberInfoBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1))
                    .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(emailTextField)
                                    .addComponent(feeAmountSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkOutAssignMemberLayout.createSequentialGroup()
                                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                                        .addComponent(dueDateYearSpinner)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel9)
                                        .addGap(40, 40, 40)))
                                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(dueDateMonthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dueDateDaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel11)))))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        checkOutAssignMemberLayout.setVerticalGroup(
            checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkOutAssignMemberLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dueDateYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(dueDateMonthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dueDateDaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feeAmountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(checkOutAssignMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitRentalButton)
                    .addComponent(memberInfoBackButton))
                .addGap(50, 50, 50))
        );

        add(checkOutAssignMember, "checkOutAssignMember");
    }// </editor-fold>//GEN-END:initComponents

    private void addToRentalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToRentalButtonActionPerformed
        // add selected books to the member's rentals
        DefaultTableModel m = (DefaultTableModel) bookSearchResultsTable.getModel();
        
        for (int i=0; i<m.getRowCount(); i++) {

            // check for a selected row
            if ((Boolean) m.getValueAt(i, 0)) {
                Book bookToAdd = new Book();

                // skip col 0
                int id = (Integer) m.getValueAt(i, 1);
                String isbn = (String) m.getValueAt(i, 2);
                String title = (String) m.getValueAt(i, 3);
                String author = (String) m.getValueAt(i, 4);
                String publisher = (String) m.getValueAt(i, 5);
                String genre = (String) m.getValueAt(i, 6);

                bookToAdd.setId(id);
                bookToAdd.setIsbn(isbn);
                bookToAdd.setTitle(title);
                bookToAdd.setAuthor(author);
                bookToAdd.setPublisher(publisher);
                bookToAdd.setGenre(genre);
                
                // create a new rental (member info for rental to be added later)
                Rental r = new Rental();
                r.setBook(bookToAdd);
                
                memberRentals.add(r);
            }
        }
        
        // do nothing if no rows were selected
        if (!memberRentals.isEmpty()) {
            // advance to the member info page
            CardLayout cl = (CardLayout) getLayout();
            cl.show(this, ViewConstants.Librarian.CheckOutBooks.MEMBER_INFO);
        }
    }//GEN-LAST:event_addToRentalButtonActionPerformed

    private void resultsBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsBackButtonActionPerformed
        
        // wipe out the current selections
        memberRentals.clear();
        
        // go back to the search screen
        CardLayout cl = (CardLayout) getLayout();
        cl.show(this, ViewConstants.Librarian.CheckOutBooks.BOOK_SEARCH);
    }//GEN-LAST:event_resultsBackButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        if (!bookSearchTextBox.getText().isEmpty()) {
            // load the book results table into memory to manage it
            DefaultTableModel m = (DefaultTableModel) bookSearchResultsTable.getModel();

            // wipe out the results table
            while (m.getRowCount() > 0) {
                m.removeRow(0);
            }

            // search the database for books matching the select fields
            String field = (String) this.bookFieldPicker.getSelectedItem();
            String value = this.bookSearchTextBox.getText();
            List<Book> books = (LDBConnector.getInstance()).searchBook(field, value);

            // add the books to the results table
            for (Book b : books)
            {
                m.addRow(new Object[] { false,
                                        b.getId(),
                                        b.getIsbn(),
                                        b.getTitle(),
                                        b.getAuthor(),
                                        b.getPublisher(),
                                        b.getGenre(),
                                        b.getNumCopies()
                });
            }

            // switch the view to the book search results
            CardLayout cl = (CardLayout) getLayout();
            cl.show(this, ViewConstants.Librarian.CheckOutBooks.BOOK_SEARCH_RESULTS);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void memberInfoBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberInfoBackButtonActionPerformed
        // prevent duplicates
        memberRentals.clear();
        
        // go back to the book search results
        CardLayout cl = (CardLayout) getLayout();
        cl.show(this, ViewConstants.Librarian.CheckOutBooks.BOOK_SEARCH_RESULTS);
    }//GEN-LAST:event_memberInfoBackButtonActionPerformed

    private void submitRentalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitRentalButtonActionPerformed
        // apply the member info to each item in the rental and submit
        String memberEmail = this.emailTextField.getText();
        int dueDateYear = (Integer) this.dueDateYearSpinner.getValue();
        int dueDateMonth = (Integer) this.dueDateMonthSpinner.getValue();
        int dueDateDay = (Integer) this.dueDateDaySpinner.getValue();
        double dueAmount = (Double) this.feeAmountSpinner.getValue();

        // convert the int values into a date;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date dueDate;
        try {
            dueDate = sdf.parse(dueDateYear + "-" + dueDateMonth + "-" + dueDateDay);
        } catch (ParseException ex) {
            System.err.println("Due date failed to parse.");
            ex.printStackTrace();
            System.out.println("Defaulting to 1 month rental");
            dueDate = new Date(System.currentTimeMillis() + 2592000000L); // adds 30 days
        }
        
        // must have an email to proceed
        if (memberEmail.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                                          "Please enter a Member's email address",
                                          "No Member EMail",
                                          JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        
        
        // assign info to each rental (book already assigned)
        for (Rental r : memberRentals) {
            r.setDueDate(dueDate);
            r.setDues(dueAmount);
        }

        // assign the selected rentals to the given user
        QueryResult result = (LDBConnector.getInstance()).createRentals(memberEmail, memberRentals);
        if (!result.isQuerySuccessful()) {
            // invalid query -- alert user and remain on page
            JOptionPane.showMessageDialog(this,
                                          result.getMessage(),
                                          "Query Failed",
                                          JOptionPane.WARNING_MESSAGE);
        } else {
            // go to main page
            this.bookFieldPicker.setSelectedIndex(0);
            this.bookSearchTextBox.setText("");
            CardLayout cl = (CardLayout) getLayout();
            cl.show(this, ViewConstants.Librarian.CheckOutBooks.BOOK_SEARCH);
        }
    }//GEN-LAST:event_submitRentalButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToRentalButton;
    private javax.swing.JComboBox bookFieldPicker;
    private javax.swing.JTable bookSearchResultsTable;
    private javax.swing.JTextField bookSearchTextBox;
    private javax.swing.JPanel checkOutAssignMember;
    private javax.swing.JPanel checkOutBookSearch;
    private javax.swing.JPanel checkOutBookSearchResults;
    private javax.swing.JSpinner dueDateDaySpinner;
    private javax.swing.JSpinner dueDateMonthSpinner;
    private javax.swing.JSpinner dueDateYearSpinner;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JSpinner feeAmountSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton memberInfoBackButton;
    private javax.swing.JButton resultsBackButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton submitRentalButton;
    // End of variables declaration//GEN-END:variables
}
