/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package neu.ccs.cs5200.mbps.ldb.view.user;

import java.awt.CardLayout;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import neu.ccs.cs5200.mbps.ldb.jdbc.LDBConnector;
import neu.ccs.cs5200.mbps.ldb.model.Book;
import neu.ccs.cs5200.mbps.ldb.view.util.ViewConstants;

/**
 * A user can search for a book without having a membership.
 * 
 * @author Matt
 */
public class UserBookSearch extends javax.swing.JPanel {

    /**
     * Creates new form BookSearch
     */
    public UserBookSearch() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bookSearchPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bookFieldPicker = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        bookSearchTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bookSearchResultsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookSearchResultsTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();

        setName(""); // NOI18N
        setLayout(new java.awt.CardLayout());

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Search for");

        bookFieldPicker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID", "ISBN", "Title", "Author", "Publisher", "Genre" }));

        jLabel1.setText("Search by");

        jLabel3.setText("Search for a Book");

        javax.swing.GroupLayout bookSearchPanelLayout = new javax.swing.GroupLayout(bookSearchPanel);
        bookSearchPanel.setLayout(bookSearchPanelLayout);
        bookSearchPanelLayout.setHorizontalGroup(
            bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookSearchPanelLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(bookSearchPanelLayout.createSequentialGroup()
                        .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookSearchTextBox)
                            .addComponent(bookFieldPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(153, Short.MAX_VALUE))
        );
        bookSearchPanelLayout.setVerticalGroup(
            bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookSearchPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bookFieldPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bookSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookSearchTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        add(bookSearchPanel, "userBookSearch");

        bookSearchResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ISBN", "Title", "Author", "Publisher", "Genre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bookSearchResultsTable);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookSearchResultsPanelLayout = new javax.swing.GroupLayout(bookSearchResultsPanel);
        bookSearchResultsPanel.setLayout(bookSearchResultsPanelLayout);
        bookSearchResultsPanelLayout.setHorizontalGroup(
            bookSearchResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(bookSearchResultsPanelLayout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(backButton)
                .addContainerGap())
        );
        bookSearchResultsPanelLayout.setVerticalGroup(
            bookSearchResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookSearchResultsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton)
                .addContainerGap())
        );

        add(bookSearchResultsPanel, "userBookSearchResults");
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        // if the field is blank for ID, halt the search
        if (((String) this.bookFieldPicker.getSelectedItem()).equals("ID") &&
                this.bookSearchTextBox.getText().isEmpty()) {
            return;
        }
        
        // switch the view to the book search results
        CardLayout cl = (CardLayout) getLayout();
        cl.show(this, ViewConstants.User.BOOK_SEARCH_RESULTS);
        
        
        // search the database for books matching the select fields
        List<Book> books = (LDBConnector.getInstance()).searchBook((String) bookFieldPicker.getSelectedItem(), bookSearchTextBox.getText());
        
        // add the books to the results table
        DefaultTableModel m = (DefaultTableModel) bookSearchResultsTable.getModel();
        
        // wipe the old table first
        while (m.getRowCount() > 0) {
            m.removeRow(0);
        }
        
        for (Book b : books)
        {
            m.addRow(new Object[] { b.getId(),
                                    b.getIsbn(),
                                    b.getTitle(),
                                    b.getAuthor(),
                                    b.getPublisher(),
                                    b.getGenre()
            });
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        CardLayout cl = (CardLayout) getLayout();
        cl.show(this, ViewConstants.User.BOOK_SEARCH);
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox bookFieldPicker;
    private javax.swing.JPanel bookSearchPanel;
    private javax.swing.JPanel bookSearchResultsPanel;
    private javax.swing.JTable bookSearchResultsTable;
    private javax.swing.JTextField bookSearchTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
